// Code generated by capnpc-go. DO NOT EDIT.

package encoding

import (
	encoding "github.com/overcyn/mochi/layout/encoding"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Node struct{ capnp.Struct }

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0xe94009e96d6eeb30

func NewNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Node{st}, err
}

func NewRootNode(s *capnp.Segment) (Node, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3})
	return Node{st}, err
}

func ReadRootNode(msg *capnp.Message) (Node, error) {
	root, err := msg.RootPtr()
	return Node{root.Struct()}, err
}

func (s Node) String() string {
	str, _ := text.Marshal(0xe94009e96d6eeb30, s.Struct)
	return str
}

func (s Node) Id() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Node) SetId(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Node) BuildId() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Node) SetBuildId(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Node) LayoutId() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Node) SetLayoutId(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Node) PaintId() int64 {
	return int64(s.Struct.Uint64(24))
}

func (s Node) SetPaintId(v int64) {
	s.Struct.SetUint64(24, uint64(v))
}

func (s Node) Children() (Node_List, error) {
	p, err := s.Struct.Ptr(0)
	return Node_List{List: p.List()}, err
}

func (s Node) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Node) SetChildren(v Node_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated Node_List, preferring placement in s's segment.
func (s Node) NewChildren(n int32) (Node_List, error) {
	l, err := NewNode_List(s.Struct.Segment(), n)
	if err != nil {
		return Node_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Node) LayoutGuide() (encoding.Guide, error) {
	p, err := s.Struct.Ptr(1)
	return encoding.Guide{Struct: p.Struct()}, err
}

func (s Node) HasLayoutGuide() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Node) SetLayoutGuide(v encoding.Guide) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLayoutGuide sets the layoutGuide field to a newly
// allocated encoding.Guide struct, preferring placement in s's segment.
func (s Node) NewLayoutGuide() (encoding.Guide, error) {
	ss, err := encoding.NewGuide(s.Struct.Segment())
	if err != nil {
		return encoding.Guide{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Node) Values() (Map, error) {
	p, err := s.Struct.Ptr(2)
	return Map{Struct: p.Struct()}, err
}

func (s Node) HasValues() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Node) SetValues(v Map) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Map struct, preferring placement in s's segment.
func (s Node) NewValues() (Map, error) {
	ss, err := NewMap(s.Struct.Segment())
	if err != nil {
		return Map{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Node_List is a list of Node.
type Node_List struct{ capnp.List }

// NewNode creates a new list of Node.
func NewNode_List(s *capnp.Segment, sz int32) (Node_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 3}, sz)
	return Node_List{l}, err
}

func (s Node_List) At(i int) Node { return Node{s.List.Struct(i)} }

func (s Node_List) Set(i int, v Node) error { return s.List.SetStruct(i, v.Struct) }

// Node_Promise is a wrapper for a Node promised by a client call.
type Node_Promise struct{ *capnp.Pipeline }

func (p Node_Promise) Struct() (Node, error) {
	s, err := p.Pipeline.Struct()
	return Node{s}, err
}

func (p Node_Promise) LayoutGuide() encoding.Guide_Promise {
	return encoding.Guide_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

func (p Node_Promise) Values() Map_Promise {
	return Map_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type Root struct{ capnp.Struct }

// Root_TypeID is the unique identifier for the type Root.
const Root_TypeID = 0x83927b3747bee5da

func NewRoot(s *capnp.Segment) (Root, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Root{st}, err
}

func NewRootRoot(s *capnp.Segment) (Root, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Root{st}, err
}

func ReadRootRoot(msg *capnp.Message) (Root, error) {
	root, err := msg.RootPtr()
	return Root{root.Struct()}, err
}

func (s Root) String() string {
	str, _ := text.Marshal(0x83927b3747bee5da, s.Struct)
	return str
}

func (s Root) Node() (Node, error) {
	p, err := s.Struct.Ptr(0)
	return Node{Struct: p.Struct()}, err
}

func (s Root) HasNode() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Root) SetNode(v Node) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNode sets the node field to a newly
// allocated Node struct, preferring placement in s's segment.
func (s Root) NewNode() (Node, error) {
	ss, err := NewNode(s.Struct.Segment())
	if err != nil {
		return Node{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Root_List is a list of Root.
type Root_List struct{ capnp.List }

// NewRoot creates a new list of Root.
func NewRoot_List(s *capnp.Segment, sz int32) (Root_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Root_List{l}, err
}

func (s Root_List) At(i int) Root { return Root{s.List.Struct(i)} }

func (s Root_List) Set(i int, v Root) error { return s.List.SetStruct(i, v.Struct) }

// Root_Promise is a wrapper for a Root promised by a client call.
type Root_Promise struct{ *capnp.Pipeline }

func (p Root_Promise) Struct() (Root, error) {
	s, err := p.Pipeline.Struct()
	return Root{s}, err
}

func (p Root_Promise) Node() Node_Promise {
	return Node_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type Map struct{ capnp.Struct }

// Map_TypeID is the unique identifier for the type Map.
const Map_TypeID = 0xbd0993cece143673

func NewMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map{st}, err
}

func NewRootMap(s *capnp.Segment) (Map, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Map{st}, err
}

func ReadRootMap(msg *capnp.Message) (Map, error) {
	root, err := msg.RootPtr()
	return Map{root.Struct()}, err
}

func (s Map) String() string {
	str, _ := text.Marshal(0xbd0993cece143673, s.Struct)
	return str
}

func (s Map) Entries() (Map_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Map_Entry_List{List: p.List()}, err
}

func (s Map) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Map) SetEntries(v Map_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Map_Entry_List, preferring placement in s's segment.
func (s Map) NewEntries(n int32) (Map_Entry_List, error) {
	l, err := NewMap_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Map_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Map_List is a list of Map.
type Map_List struct{ capnp.List }

// NewMap creates a new list of Map.
func NewMap_List(s *capnp.Segment, sz int32) (Map_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Map_List{l}, err
}

func (s Map_List) At(i int) Map { return Map{s.List.Struct(i)} }

func (s Map_List) Set(i int, v Map) error { return s.List.SetStruct(i, v.Struct) }

// Map_Promise is a wrapper for a Map promised by a client call.
type Map_Promise struct{ *capnp.Pipeline }

func (p Map_Promise) Struct() (Map, error) {
	s, err := p.Pipeline.Struct()
	return Map{s}, err
}

type Map_Entry struct{ capnp.Struct }

// Map_Entry_TypeID is the unique identifier for the type Map_Entry.
const Map_Entry_TypeID = 0x91412d97d3671d43

func NewMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry{st}, err
}

func NewRootMap_Entry(s *capnp.Segment) (Map_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Map_Entry{st}, err
}

func ReadRootMap_Entry(msg *capnp.Message) (Map_Entry, error) {
	root, err := msg.RootPtr()
	return Map_Entry{root.Struct()}, err
}

func (s Map_Entry) String() string {
	str, _ := text.Marshal(0x91412d97d3671d43, s.Struct)
	return str
}

func (s Map_Entry) Key() (capnp.Pointer, error) {
	return s.Struct.Pointer(0)
}

func (s Map_Entry) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Map_Entry) KeyPtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Map_Entry) SetKey(v capnp.Pointer) error {
	return s.Struct.SetPointer(0, v)
}

func (s Map_Entry) SetKeyPtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Map_Entry) Value() (capnp.Pointer, error) {
	return s.Struct.Pointer(1)
}

func (s Map_Entry) HasValue() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Map_Entry) ValuePtr() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Map_Entry) SetValue(v capnp.Pointer) error {
	return s.Struct.SetPointer(1, v)
}

func (s Map_Entry) SetValuePtr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Map_Entry_List is a list of Map_Entry.
type Map_Entry_List struct{ capnp.List }

// NewMap_Entry creates a new list of Map_Entry.
func NewMap_Entry_List(s *capnp.Segment, sz int32) (Map_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Map_Entry_List{l}, err
}

func (s Map_Entry_List) At(i int) Map_Entry { return Map_Entry{s.List.Struct(i)} }

func (s Map_Entry_List) Set(i int, v Map_Entry) error { return s.List.SetStruct(i, v.Struct) }

// Map_Entry_Promise is a wrapper for a Map_Entry promised by a client call.
type Map_Entry_Promise struct{ *capnp.Pipeline }

func (p Map_Entry_Promise) Struct() (Map_Entry, error) {
	s, err := p.Pipeline.Struct()
	return Map_Entry{s}, err
}

func (p Map_Entry_Promise) Key() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(0)
}

func (p Map_Entry_Promise) Value() *capnp.Pipeline {
	return p.Pipeline.GetPipeline(1)
}

const schema_9abec47167560884 = "x\xdalRAH\x14_\x1c\xfe\xbe\xf7f\xdc]\xfc" +
	"\xab\xf3v\x06\x84?\xc5\x82\x14e\xa1\x98I\x89\x10\xab" +
	"\x85\x88\x85\xe1+\xf0\xbe:\x83\x0dm\xb3\x9b\xbb\xabl" +
	"\x1d\x04\xeb\x1e\xd5!\x08:v\xa8SA\x1d\x02\x15\x0f" +
	"\x05\x86\xe1\xa5Kt*\xb0\x83\xd4\xb5\xf3\xc4\xdb\xb5u" +
	"\xac.\xc3\x9b\xf7\xbe\xf7}\xbf\xef{\xdf@\x85\xa3\xe2" +
	"\x94\xbdl\x01z\xc8n\x8b?\x7f[\x9f8{\xfb\xc1" +
	"\x1d\xa8v\xc6w\xd33\xf37\xdf\xae?\x86\xcd\x14\xe0" +
	"\x1e\x15+n\xafh\xae\xf2`|\xe1\xf0\xfc\xc7G}" +
	"c\xf7\xa1\xba\x18W\xcex\xdb\xdb\x0f3k\xb0E\xca" +
	"\xa1;.\x9e\xbbS\x0d\xec\xa4XB\xe2\xf8O^\x87" +
	"\xeeSq\xcb}&\xba\x01\xf7\xa5\xc8\x03n\x87\xec\x8e" +
	"\x07\xbeG7v3\xa3\xbb\xd0\xed\xb4\x12\x17\xa4\xa1\xcc" +
	"\xc8\x15\xb7\xc3\xacNg\xe4=\xc2\x8f\x17\xc3`\xa9\x7f" +
	"\xaePfT\x1e\xb9R*U1MjKZ\x80E" +
	"@u\x9c\x00tZR{\x82]Q\xc9\x0f\xe8\xec\x0b" +
	"\x80t\xc0\x03\x14S\x85r\xffxWT]\xa8\x1b\x9e" +
	"t\x8b\xa7\xb7\x07\xd0G$\xf5\x80\xa0\"=\x9a\xcd\xbe" +
	"A@\x1f\x97\xd4C\x82\xa9\xebA\x9dY&\xec\x02\xcc" +
	"\x82\xb9\xc5B\xb1\x160k\xff}\xd4\x12F\xbe\xa9\xac" +
	"-&\xa3\xe5`n\xdcL\x92\xb4s~\xcf\xce\xb0\xe0" +
	"r\x10U\x17\xc2\xa0\xc2NpZ\x92\xce\xfeU`\x94" +
	"\x8a9m\x89\x84\xa8\x19\xd9`\xc7\xd2Tv\x8f\xb2\x07" +
	"S\x97\x82zn\xc6\x8cw \x82\xcb%?h\xa4x" +
	"\xa8%\xfb\xfa\x7f@\xbf\x90\xd4\xab\x09\xf7o\xcc,\xaf" +
	"$\xf5\x86\xa0\x12\xc2\xa3\x00\xd4\xdaE@\xafJ\xeaM" +
	"A%\xa5G\x09\xa8w\x06\xb9!\xa9?\x08\xd2\xf2h" +
	"\x01\xea\xbd\x01nJ\xea\x1dAe\xd3\xa3\x0d\xa8\xaf\xb3" +
	"\x80\xfe\"\xa9\x7f\x08\xaa6\xe1\xb1\x0dP\xbb#\x80\xde" +
	"\x91\xbc:LA\x19\xfa\xb4!h\x83\xcb\xb3\xb5\xb0\xe8" +
	"O\xb6\xfe\xe3b\xa1^\xaaU'}\x13\xefoL\xb9" +
	"\x10F\xd5\x04f\xeeZX\xf4\x17\x82\x08\xcd,\x9a\xb9" +
	"%\x0b\xd1\xd9\"\x9a\xa8!\x156\x0asr\xeb\xe7\xb9" +
	"\xc2\xa7'[{\x85\xc97\x9e\xb4B'\xf9\xa0\xff\x08" +
	"\x1cP<\xa6\xd3d\xa3I\xe6\xebH\xf2?\x08f!" +
	"\x0c\xd1\xaf\x00\x00\x00\xff\xff\xaf\xf7\xccM"

func init() {
	schemas.Register(schema_9abec47167560884,
		0x83927b3747bee5da,
		0x91412d97d3671d43,
		0xbd0993cece143673,
		0xe94009e96d6eeb30)
}
