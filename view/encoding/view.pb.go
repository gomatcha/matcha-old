// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/overcyn/mochi/view/encoding/view.proto

/*
	Package encoding is a generated protocol buffer package.

	It is generated from these files:
		github.com/overcyn/mochi/view/encoding/view.proto

	It has these top-level messages:
		Node
		Root
*/
package encoding

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import layout "github.com/overcyn/mochi/layout/encoding"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	Id          int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuildId     int64         `protobuf:"varint,2,opt,name=buildId,proto3" json:"buildId,omitempty"`
	LayoutId    int64         `protobuf:"varint,3,opt,name=layoutId,proto3" json:"layoutId,omitempty"`
	PaintId     int64         `protobuf:"varint,4,opt,name=paintId,proto3" json:"paintId,omitempty"`
	Children    []*Node       `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
	LayoutGuide *layout.Guide `protobuf:"bytes,6,opt,name=layoutGuide" json:"layoutGuide,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorView, []int{0} }

func (m *Node) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *Node) GetLayoutId() int64 {
	if m != nil {
		return m.LayoutId
	}
	return 0
}

func (m *Node) GetPaintId() int64 {
	if m != nil {
		return m.PaintId
	}
	return 0
}

func (m *Node) GetChildren() []*Node {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Node) GetLayoutGuide() *layout.Guide {
	if m != nil {
		return m.LayoutGuide
	}
	return nil
}

type Root struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *Root) Reset()                    { *m = Root{} }
func (m *Root) String() string            { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()               {}
func (*Root) Descriptor() ([]byte, []int) { return fileDescriptorView, []int{1} }

func (m *Root) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "view.Node")
	proto.RegisterType((*Root)(nil), "view.Root")
}
func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintView(dAtA, i, uint64(m.Id))
	}
	if m.BuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintView(dAtA, i, uint64(m.BuildId))
	}
	if m.LayoutId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintView(dAtA, i, uint64(m.LayoutId))
	}
	if m.PaintId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintView(dAtA, i, uint64(m.PaintId))
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintView(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LayoutGuide != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintView(dAtA, i, uint64(m.LayoutGuide.Size()))
		n1, err := m.LayoutGuide.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Root) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Root) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Node != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintView(dAtA, i, uint64(m.Node.Size()))
		n2, err := m.Node.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64View(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32View(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintView(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Node) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovView(uint64(m.Id))
	}
	if m.BuildId != 0 {
		n += 1 + sovView(uint64(m.BuildId))
	}
	if m.LayoutId != 0 {
		n += 1 + sovView(uint64(m.LayoutId))
	}
	if m.PaintId != 0 {
		n += 1 + sovView(uint64(m.PaintId))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovView(uint64(l))
		}
	}
	if m.LayoutGuide != nil {
		l = m.LayoutGuide.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func (m *Root) Size() (n int) {
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovView(uint64(l))
	}
	return n
}

func sovView(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozView(x uint64) (n int) {
	return sovView(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildId", wireType)
			}
			m.BuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutId", wireType)
			}
			m.LayoutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LayoutId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaintId", wireType)
			}
			m.PaintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaintId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &Node{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LayoutGuide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LayoutGuide == nil {
				m.LayoutGuide = &layout.Guide{}
			}
			if err := m.LayoutGuide.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Root) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowView
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Root: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Root: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowView
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthView
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &Node{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipView(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthView
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipView(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowView
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowView
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthView
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowView
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipView(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthView = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowView   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/overcyn/mochi/view/encoding/view.proto", fileDescriptorView)
}

var fileDescriptorView = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0x12, 0x4a, 0x74, 0x11, 0x0c, 0x9e, 0xac, 0x0c, 0x51, 0xd4, 0xa1, 0xca, 0x94,
	0x88, 0x22, 0x5e, 0x80, 0x05, 0x75, 0x61, 0xc8, 0xc8, 0xd6, 0xe4, 0xac, 0xe6, 0xa4, 0xd4, 0x57,
	0x45, 0x49, 0x51, 0xdf, 0x84, 0xb7, 0x61, 0x65, 0xe4, 0x11, 0x50, 0x78, 0x11, 0x14, 0xbb, 0x2d,
	0x30, 0xb0, 0xf9, 0xff, 0x7f, 0x7f, 0xbf, 0x7d, 0x07, 0xb7, 0x1b, 0xea, 0x9b, 0xa1, 0xca, 0x6b,
	0xde, 0x16, 0xbc, 0xd7, 0x5d, 0x7d, 0x30, 0xc5, 0x96, 0xeb, 0x86, 0x8a, 0x3d, 0xe9, 0x97, 0x42,
	0x9b, 0x9a, 0x91, 0xcc, 0xc6, 0xaa, 0x7c, 0xd7, 0x71, 0xcf, 0x32, 0x98, 0xce, 0xf1, 0xfd, 0xbf,
	0x60, 0xbb, 0x3e, 0xf0, 0xd0, 0xff, 0xa0, 0x4e, 0x3b, 0x78, 0xfe, 0x26, 0x20, 0x78, 0x62, 0xd4,
	0xf2, 0x06, 0x3c, 0x42, 0x25, 0x52, 0x91, 0xf9, 0xa5, 0x47, 0x28, 0x15, 0x5c, 0x55, 0x03, 0xb5,
	0xb8, 0x42, 0xe5, 0x59, 0xf3, 0x24, 0x65, 0x0c, 0xa1, 0xab, 0x58, 0xa1, 0xf2, 0x6d, 0x74, 0xd6,
	0x13, 0xb5, 0x5b, 0x93, 0x99, 0xa2, 0xc0, 0x51, 0x47, 0x29, 0x17, 0x10, 0xd6, 0x0d, 0xb5, 0xd8,
	0x69, 0xa3, 0x2e, 0x53, 0x3f, 0x8b, 0x96, 0x90, 0xdb, 0x21, 0xa6, 0xd7, 0xcb, 0x73, 0x26, 0x0b,
	0x88, 0x5c, 0xdb, 0xe3, 0x40, 0xa8, 0xd5, 0x2c, 0x15, 0x59, 0xb4, 0xbc, 0xce, 0x8f, 0x9f, 0xb6,
	0x66, 0xf9, 0xfb, 0xc6, 0x7c, 0x01, 0x41, 0xc9, 0xdc, 0xcb, 0x04, 0x02, 0xc3, 0xa8, 0xed, 0x08,
	0x7f, 0xcb, 0xad, 0xff, 0x10, 0xbf, 0x8f, 0x89, 0xf8, 0x18, 0x13, 0xf1, 0x39, 0x26, 0xe2, 0xf5,
	0x2b, 0xb9, 0x78, 0x0e, 0x4f, 0x2b, 0xa9, 0x66, 0x76, 0x19, 0x77, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xd6, 0x36, 0x70, 0x22, 0x7e, 0x01, 0x00, 0x00,
}
