// Code generated by capnpc-go. DO NOT EDIT.

package encoding

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type TapRecognizer struct{ capnp.Struct }

// TapRecognizer_TypeID is the unique identifier for the type TapRecognizer.
const TapRecognizer_TypeID = 0x9bdc094ccdd9d5c3

func NewTapRecognizer(s *capnp.Segment) (TapRecognizer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TapRecognizer{st}, err
}

func NewRootTapRecognizer(s *capnp.Segment) (TapRecognizer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TapRecognizer{st}, err
}

func ReadRootTapRecognizer(msg *capnp.Message) (TapRecognizer, error) {
	root, err := msg.RootPtr()
	return TapRecognizer{root.Struct()}, err
}

func (s TapRecognizer) String() string {
	str, _ := text.Marshal(0x9bdc094ccdd9d5c3, s.Struct)
	return str
}

func (s TapRecognizer) Count() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s TapRecognizer) SetCount(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// TapRecognizer_List is a list of TapRecognizer.
type TapRecognizer_List struct{ capnp.List }

// NewTapRecognizer creates a new list of TapRecognizer.
func NewTapRecognizer_List(s *capnp.Segment, sz int32) (TapRecognizer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return TapRecognizer_List{l}, err
}

func (s TapRecognizer_List) At(i int) TapRecognizer { return TapRecognizer{s.List.Struct(i)} }

func (s TapRecognizer_List) Set(i int, v TapRecognizer) error { return s.List.SetStruct(i, v.Struct) }

// TapRecognizer_Promise is a wrapper for a TapRecognizer promised by a client call.
type TapRecognizer_Promise struct{ *capnp.Pipeline }

func (p TapRecognizer_Promise) Struct() (TapRecognizer, error) {
	s, err := p.Pipeline.Struct()
	return TapRecognizer{s}, err
}

const schema_8d032c18f4c65862 = "x\xda\x12\x08p`2d\xdd\xcf\xc8\xc0\x10(\xc2\xca" +
	"\xf6\xff\xf0\xd5\x9bg}8\xef\xccf\x08\xe4ad\xfc" +
	"\x9f\x14q\xec\x8b\x84\x0es/\x03\x0b;\x03\x83\xe0\xd1" +
	"K\x82\x17A\xf4Y{\x06\xdd\xff%\xf9\xa5\xc9\x19z" +
	"\xc9\x89L\x05y\x05V!\x89\x05A\xa9\xc9\xf9\xe9y" +
	"\x99U\xa9\x8cE\x01\x8c\x8c\x81,\xcc,\x0c\x0c,\x8c" +
	"\x0c\x0c\x82\xbcF\x0c\x0c\x81\x1c\xcc\x8c\x81\"L\x8c\xf2" +
	"\xc9\xf9\xa5y%\x8c\xac\x0cL\x8c\xac\x0c\x8c\x80\x00\x00" +
	"\x00\xff\xff\xe9K\x1f\x99"

func init() {
	schemas.Register(schema_8d032c18f4c65862,
		0x9bdc094ccdd9d5c3)
}
