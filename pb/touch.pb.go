// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/overcyn/mochi/pb/touch.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Recognizer struct {
	Id         int64                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name       string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Recognizer *google_protobuf.Any `protobuf:"bytes,3,opt,name=recognizer" json:"recognizer,omitempty"`
}

func (m *Recognizer) Reset()                    { *m = Recognizer{} }
func (m *Recognizer) String() string            { return proto.CompactTextString(m) }
func (*Recognizer) ProtoMessage()               {}
func (*Recognizer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Recognizer) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Recognizer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Recognizer) GetRecognizer() *google_protobuf.Any {
	if m != nil {
		return m.Recognizer
	}
	return nil
}

type RecognizerList struct {
	Recognizers []*Recognizer `protobuf:"bytes,1,rep,name=recognizers" json:"recognizers,omitempty"`
}

func (m *RecognizerList) Reset()                    { *m = RecognizerList{} }
func (m *RecognizerList) String() string            { return proto.CompactTextString(m) }
func (*RecognizerList) ProtoMessage()               {}
func (*RecognizerList) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RecognizerList) GetRecognizers() []*Recognizer {
	if m != nil {
		return m.Recognizers
	}
	return nil
}

type TapRecognizer struct {
	Count          int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	RecognizedFunc int64 `protobuf:"varint,2,opt,name=recognizedFunc" json:"recognizedFunc,omitempty"`
}

func (m *TapRecognizer) Reset()                    { *m = TapRecognizer{} }
func (m *TapRecognizer) String() string            { return proto.CompactTextString(m) }
func (*TapRecognizer) ProtoMessage()               {}
func (*TapRecognizer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *TapRecognizer) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TapRecognizer) GetRecognizedFunc() int64 {
	if m != nil {
		return m.RecognizedFunc
	}
	return 0
}

type TapEvent struct {
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Position  *Point                      `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
}

func (m *TapEvent) Reset()                    { *m = TapEvent{} }
func (m *TapEvent) String() string            { return proto.CompactTextString(m) }
func (*TapEvent) ProtoMessage()               {}
func (*TapEvent) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *TapEvent) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *TapEvent) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

type PressRecognizer struct {
}

func (m *PressRecognizer) Reset()                    { *m = PressRecognizer{} }
func (m *PressRecognizer) String() string            { return proto.CompactTextString(m) }
func (*PressRecognizer) ProtoMessage()               {}
func (*PressRecognizer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

type PanRecognizer struct {
}

func (m *PanRecognizer) Reset()                    { *m = PanRecognizer{} }
func (m *PanRecognizer) String() string            { return proto.CompactTextString(m) }
func (*PanRecognizer) ProtoMessage()               {}
func (*PanRecognizer) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func init() {
	proto.RegisterType((*Recognizer)(nil), "touch.Recognizer")
	proto.RegisterType((*RecognizerList)(nil), "touch.RecognizerList")
	proto.RegisterType((*TapRecognizer)(nil), "touch.TapRecognizer")
	proto.RegisterType((*TapEvent)(nil), "touch.TapEvent")
	proto.RegisterType((*PressRecognizer)(nil), "touch.PressRecognizer")
	proto.RegisterType((*PanRecognizer)(nil), "touch.PanRecognizer")
}

func init() { proto.RegisterFile("github.com/overcyn/mochi/pb/touch.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x6f, 0x82, 0x40,
	0x10, 0x85, 0x03, 0xd4, 0x56, 0x87, 0x88, 0x71, 0xe3, 0x81, 0x7a, 0x29, 0xe1, 0xd0, 0xd2, 0x0b,
	0x24, 0xd8, 0x43, 0xaf, 0x35, 0xb1, 0xa7, 0x9a, 0x90, 0x8d, 0xa7, 0xde, 0x00, 0x57, 0xdc, 0x44,
	0x76, 0x08, 0x2c, 0x26, 0xf4, 0xe7, 0xf4, 0x97, 0x36, 0x5d, 0x14, 0x8c, 0x4d, 0x7a, 0x63, 0x66,
	0xbe, 0xe1, 0xbd, 0x79, 0x0b, 0x4f, 0x19, 0x97, 0xfb, 0x3a, 0xf1, 0x53, 0xcc, 0x03, 0x3c, 0xb2,
	0x32, 0x6d, 0x44, 0x90, 0x63, 0xba, 0xe7, 0x41, 0x91, 0x04, 0x12, 0xeb, 0x74, 0xef, 0x17, 0x25,
	0x4a, 0x24, 0x03, 0x55, 0xcc, 0xef, 0x33, 0xc4, 0xec, 0xc0, 0x02, 0xd5, 0x4c, 0xea, 0x5d, 0x10,
	0x8b, 0xa6, 0x25, 0xe6, 0x0f, 0xd7, 0x23, 0xc9, 0x73, 0x56, 0xc9, 0x38, 0x2f, 0x4e, 0x80, 0xf7,
	0x9f, 0xd6, 0x21, 0x6e, 0xb0, 0x96, 0x2d, 0xe9, 0xee, 0x00, 0x28, 0x4b, 0x31, 0x13, 0xfc, 0x8b,
	0x95, 0xc4, 0x02, 0x9d, 0x6f, 0x6d, 0xcd, 0xd1, 0x3c, 0x83, 0xea, 0x7c, 0x4b, 0x08, 0xdc, 0x88,
	0x38, 0x67, 0xb6, 0xee, 0x68, 0xde, 0x88, 0xaa, 0x6f, 0xf2, 0x02, 0x50, 0x76, 0x1b, 0xb6, 0xe1,
	0x68, 0x9e, 0x19, 0xce, 0xfc, 0xd6, 0x91, 0x7f, 0x76, 0xe4, 0xbf, 0x89, 0x86, 0x5e, 0x70, 0xee,
	0x0a, 0xac, 0x5e, 0xe7, 0x83, 0x57, 0x92, 0x2c, 0xc0, 0xec, 0xe7, 0x95, 0xad, 0x39, 0x86, 0x67,
	0x86, 0x53, 0xbf, 0x4d, 0xa2, 0x67, 0xe9, 0x25, 0xe5, 0xae, 0x61, 0xbc, 0x89, 0x8b, 0x0b, 0xc7,
	0x33, 0x18, 0xa4, 0x58, 0x0b, 0x79, 0x32, 0xdd, 0x16, 0xe4, 0x11, 0xac, 0x6e, 0x6b, 0xfb, 0x5e,
	0x8b, 0x54, 0x5d, 0x60, 0xd0, 0xab, 0xae, 0x8b, 0x30, 0xdc, 0xc4, 0xc5, 0xea, 0xc8, 0x84, 0x24,
	0xaf, 0x30, 0xea, 0x62, 0x54, 0x7f, 0x33, 0xc3, 0xf9, 0x9f, 0xb3, 0x36, 0x67, 0x82, 0xf6, 0x30,
	0x79, 0x86, 0x61, 0x81, 0x15, 0x97, 0x1c, 0x85, 0xd2, 0x31, 0xc3, 0xb1, 0x7f, 0x0a, 0x39, 0x42,
	0x2e, 0x24, 0xed, 0xc6, 0xee, 0x14, 0x26, 0x51, 0xc9, 0xaa, 0xaa, 0xbf, 0xc0, 0x9d, 0xc0, 0x38,
	0x8a, 0x45, 0xdf, 0x58, 0x5a, 0x9f, 0x7a, 0x91, 0x7c, 0xeb, 0x77, 0xeb, 0xdf, 0x07, 0x8b, 0x96,
	0xc9, 0xad, 0x52, 0x5f, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x63, 0xb9, 0xee, 0x2d, 0x41, 0x02,
	0x00, 0x00,
}
