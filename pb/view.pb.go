// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/overcyn/matcha/pb/view.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Node struct {
	Id          int64                           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuildId     int64                           `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
	LayoutId    int64                           `protobuf:"varint,3,opt,name=layoutId" json:"layoutId,omitempty"`
	PaintId     int64                           `protobuf:"varint,4,opt,name=paintId" json:"paintId,omitempty"`
	BridgeName  string                          `protobuf:"bytes,7,opt,name=bridgeName" json:"bridgeName,omitempty"`
	BridgeValue *google_protobuf.Any            `protobuf:"bytes,8,opt,name=bridgeValue" json:"bridgeValue,omitempty"`
	Values      map[string]*google_protobuf.Any `protobuf:"bytes,10,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Children    []*Node                         `protobuf:"bytes,5,rep,name=children" json:"children,omitempty"`
	LayoutGuide *Guide                          `protobuf:"bytes,6,opt,name=layoutGuide" json:"layoutGuide,omitempty"`
	PaintStyle  *PaintStyle                     `protobuf:"bytes,9,opt,name=paintStyle" json:"paintStyle,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Node) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *Node) GetLayoutId() int64 {
	if m != nil {
		return m.LayoutId
	}
	return 0
}

func (m *Node) GetPaintId() int64 {
	if m != nil {
		return m.PaintId
	}
	return 0
}

func (m *Node) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *Node) GetBridgeValue() *google_protobuf.Any {
	if m != nil {
		return m.BridgeValue
	}
	return nil
}

func (m *Node) GetValues() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Node) GetChildren() []*Node {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *Node) GetLayoutGuide() *Guide {
	if m != nil {
		return m.LayoutGuide
	}
	return nil
}

func (m *Node) GetPaintStyle() *PaintStyle {
	if m != nil {
		return m.PaintStyle
	}
	return nil
}

type Root struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *Root) Reset()                    { *m = Root{} }
func (m *Root) String() string            { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()               {}
func (*Root) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Root) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "matcha.Node")
	proto.RegisterType((*Root)(nil), "matcha.Root")
}

func init() { proto.RegisterFile("github.com/overcyn/matcha/pb/view.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x8a, 0xdb, 0x30,
	0x10, 0xc6, 0xf1, 0x9f, 0x38, 0xce, 0xb8, 0x7f, 0x45, 0x0f, 0xaa, 0x0f, 0xc5, 0xe4, 0x52, 0xb7,
	0x07, 0xb9, 0x4d, 0xa1, 0x94, 0xde, 0x1a, 0x28, 0x25, 0x87, 0xa6, 0x41, 0x85, 0x3d, 0xec, 0xcd,
	0xb6, 0xb4, 0x8e, 0x58, 0xc7, 0x32, 0x8e, 0x9d, 0xc5, 0xaf, 0xb3, 0x2f, 0xb4, 0xaf, 0xb4, 0x78,
	0x94, 0x04, 0xb3, 0xb0, 0xb9, 0x69, 0xe6, 0xfb, 0x7d, 0xd2, 0x37, 0x1a, 0xf8, 0x58, 0xa8, 0x76,
	0xdb, 0x65, 0x2c, 0xd7, 0xbb, 0x44, 0x1f, 0x64, 0x93, 0xf7, 0x55, 0xb2, 0x4b, 0xdb, 0x7c, 0x9b,
	0x26, 0x75, 0x96, 0x1c, 0x94, 0xbc, 0x63, 0x75, 0xa3, 0x5b, 0x4d, 0x3c, 0xd3, 0x0d, 0x3f, 0x5d,
	0x34, 0x94, 0x69, 0xaf, 0xbb, 0xd6, 0x58, 0xc2, 0xf8, 0x22, 0x5a, 0xa7, 0xaa, 0x3a, 0x91, 0xef,
	0x0b, 0xad, 0x8b, 0x52, 0x26, 0x58, 0x65, 0xdd, 0x4d, 0x92, 0x56, 0xbd, 0x91, 0xe6, 0x0f, 0x0e,
	0xb8, 0x6b, 0x2d, 0x24, 0x79, 0x05, 0xb6, 0x12, 0xd4, 0x8a, 0xac, 0xd8, 0xe1, 0xb6, 0x12, 0x84,
	0xc2, 0x34, 0xeb, 0x54, 0x29, 0x56, 0x82, 0xda, 0xd8, 0x3c, 0x95, 0x24, 0x04, 0xdf, 0xe4, 0x58,
	0x09, 0xea, 0xa0, 0x74, 0xae, 0x07, 0x17, 0x3e, 0xbc, 0x12, 0xd4, 0x35, 0xae, 0x63, 0x49, 0x3e,
	0x00, 0x64, 0x8d, 0x12, 0x85, 0x5c, 0xa7, 0x3b, 0x49, 0xa7, 0x91, 0x15, 0xcf, 0xf8, 0xa8, 0x43,
	0xbe, 0x43, 0x60, 0xaa, 0xab, 0xb4, 0xec, 0x24, 0xf5, 0x23, 0x2b, 0x0e, 0x16, 0xef, 0x98, 0x49,
	0xce, 0x4e, 0xc9, 0xd9, 0xaf, 0xaa, 0xe7, 0x63, 0x90, 0x7c, 0x01, 0xef, 0x30, 0x1c, 0xf6, 0x14,
	0x22, 0x27, 0x0e, 0x16, 0x94, 0x99, 0x3f, 0x60, 0xc3, 0x54, 0x0c, 0x99, 0xfd, 0xef, 0xaa, 0x6d,
	0x7a, 0x7e, 0xe4, 0x48, 0x0c, 0x7e, 0xbe, 0x55, 0xa5, 0x68, 0x64, 0x45, 0x27, 0xe8, 0x79, 0x31,
	0xf6, 0xf0, 0xb3, 0x4a, 0x12, 0x08, 0xcc, 0x64, 0x7f, 0x3a, 0x25, 0x24, 0xf5, 0x30, 0xd3, 0x4b,
	0x76, 0xdc, 0x02, 0x36, 0xf9, 0x98, 0x20, 0x5f, 0x01, 0x70, 0xde, 0xff, 0x6d, 0x5f, 0x4a, 0x3a,
	0x43, 0xfe, 0x2d, 0x33, 0xab, 0xd8, 0x9c, 0x05, 0x3e, 0x82, 0xc2, 0x7f, 0x10, 0x8c, 0x42, 0x92,
	0x37, 0xe0, 0xdc, 0xca, 0x1e, 0xf7, 0x30, 0xe3, 0xc3, 0x91, 0x7c, 0x86, 0x09, 0x06, 0xc7, 0x35,
	0x3c, 0xf7, 0x25, 0x06, 0xf9, 0x69, 0xff, 0xb0, 0xe6, 0x31, 0xb8, 0x5c, 0xeb, 0x96, 0x44, 0xe0,
	0x56, 0x5a, 0x48, 0xbc, 0xea, 0xe9, 0x88, 0xa8, 0x2c, 0x5f, 0x5f, 0xdb, 0x75, 0x76, 0x6f, 0xfb,
	0x7f, 0x51, 0xd9, 0x2c, 0x33, 0x0f, 0xef, 0xfc, 0xf6, 0x18, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x4f,
	0x07, 0xc6, 0xb6, 0x02, 0x00, 0x00,
}
