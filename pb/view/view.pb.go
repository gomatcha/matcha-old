// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gomatcha.io/matcha/pb/view/view.proto

/*
Package view is a generated protocol buffer package.

It is generated from these files:
	gomatcha.io/matcha/pb/view/view.proto

It has these top-level messages:
	BuildNode
	LayoutPaintNode
	Root
*/
package view

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import matcha_paint "gomatcha.io/matcha/pb/paint"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BuildNode struct {
	Id          int64                           `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuildId     int64                           `protobuf:"varint,2,opt,name=buildId" json:"buildId,omitempty"`
	BridgeName  string                          `protobuf:"bytes,3,opt,name=bridgeName" json:"bridgeName,omitempty"`
	BridgeValue *google_protobuf.Any            `protobuf:"bytes,4,opt,name=bridgeValue" json:"bridgeValue,omitempty"`
	Values      map[string]*google_protobuf.Any `protobuf:"bytes,5,rep,name=values" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Children    []int64                         `protobuf:"varint,6,rep,packed,name=children" json:"children,omitempty"`
}

func (m *BuildNode) Reset()                    { *m = BuildNode{} }
func (m *BuildNode) String() string            { return proto.CompactTextString(m) }
func (*BuildNode) ProtoMessage()               {}
func (*BuildNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BuildNode) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuildNode) GetBuildId() int64 {
	if m != nil {
		return m.BuildId
	}
	return 0
}

func (m *BuildNode) GetBridgeName() string {
	if m != nil {
		return m.BridgeName
	}
	return ""
}

func (m *BuildNode) GetBridgeValue() *google_protobuf.Any {
	if m != nil {
		return m.BridgeValue
	}
	return nil
}

func (m *BuildNode) GetValues() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *BuildNode) GetChildren() []int64 {
	if m != nil {
		return m.Children
	}
	return nil
}

type LayoutPaintNode struct {
	Id       int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	LayoutId int64 `protobuf:"varint,2,opt,name=layoutId" json:"layoutId,omitempty"`
	PaintId  int64 `protobuf:"varint,3,opt,name=paintId" json:"paintId,omitempty"`
	// matcha.layout.Guide layoutGuide = 4;
	// Guide
	Minx       float64             `protobuf:"fixed64,4,opt,name=minx" json:"minx,omitempty"`
	Miny       float64             `protobuf:"fixed64,5,opt,name=miny" json:"miny,omitempty"`
	Maxx       float64             `protobuf:"fixed64,6,opt,name=maxx" json:"maxx,omitempty"`
	Maxy       float64             `protobuf:"fixed64,7,opt,name=maxy" json:"maxy,omitempty"`
	ZIndex     int64               `protobuf:"varint,8,opt,name=zIndex" json:"zIndex,omitempty"`
	PaintStyle *matcha_paint.Style `protobuf:"bytes,9,opt,name=paintStyle" json:"paintStyle,omitempty"`
}

func (m *LayoutPaintNode) Reset()                    { *m = LayoutPaintNode{} }
func (m *LayoutPaintNode) String() string            { return proto.CompactTextString(m) }
func (*LayoutPaintNode) ProtoMessage()               {}
func (*LayoutPaintNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LayoutPaintNode) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LayoutPaintNode) GetLayoutId() int64 {
	if m != nil {
		return m.LayoutId
	}
	return 0
}

func (m *LayoutPaintNode) GetPaintId() int64 {
	if m != nil {
		return m.PaintId
	}
	return 0
}

func (m *LayoutPaintNode) GetMinx() float64 {
	if m != nil {
		return m.Minx
	}
	return 0
}

func (m *LayoutPaintNode) GetMiny() float64 {
	if m != nil {
		return m.Miny
	}
	return 0
}

func (m *LayoutPaintNode) GetMaxx() float64 {
	if m != nil {
		return m.Maxx
	}
	return 0
}

func (m *LayoutPaintNode) GetMaxy() float64 {
	if m != nil {
		return m.Maxy
	}
	return 0
}

func (m *LayoutPaintNode) GetZIndex() int64 {
	if m != nil {
		return m.ZIndex
	}
	return 0
}

func (m *LayoutPaintNode) GetPaintStyle() *matcha_paint.Style {
	if m != nil {
		return m.PaintStyle
	}
	return nil
}

type Root struct {
	LayoutPaintNodes map[int64]*LayoutPaintNode `protobuf:"bytes,2,rep,name=layoutPaintNodes" json:"layoutPaintNodes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BuildNodes       map[int64]*BuildNode       `protobuf:"bytes,3,rep,name=buildNodes" json:"buildNodes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Root) Reset()                    { *m = Root{} }
func (m *Root) String() string            { return proto.CompactTextString(m) }
func (*Root) ProtoMessage()               {}
func (*Root) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Root) GetLayoutPaintNodes() map[int64]*LayoutPaintNode {
	if m != nil {
		return m.LayoutPaintNodes
	}
	return nil
}

func (m *Root) GetBuildNodes() map[int64]*BuildNode {
	if m != nil {
		return m.BuildNodes
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildNode)(nil), "matcha.view.BuildNode")
	proto.RegisterType((*LayoutPaintNode)(nil), "matcha.view.LayoutPaintNode")
	proto.RegisterType((*Root)(nil), "matcha.view.Root")
}

func init() { proto.RegisterFile("gomatcha.io/matcha/pb/view/view.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xdd, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0x76, 0x92, 0x26, 0xc7, 0x63, 0x2d, 0xda, 0x5a, 0x34, 0x33, 0x86, 0x17, 0x18, 0x35,
	0x63, 0xd8, 0x90, 0xc2, 0x18, 0xbd, 0x6b, 0x60, 0x17, 0x81, 0xad, 0x2b, 0x2a, 0xeb, 0xc5, 0xee,
	0xe4, 0x5a, 0x4b, 0xc5, 0x1c, 0x2b, 0x24, 0x4e, 0x6b, 0xed, 0x71, 0xf6, 0x10, 0x7b, 0x96, 0x3d,
	0xc8, 0x1e, 0x60, 0xf8, 0xf8, 0x07, 0x39, 0xf5, 0x6e, 0x84, 0xce, 0xa7, 0x73, 0x3e, 0x9d, 0xf3,
	0x7d, 0x07, 0xde, 0x2c, 0xd5, 0x8a, 0xe7, 0xb7, 0x77, 0x3c, 0x94, 0x2a, 0xaa, 0x6e, 0xd1, 0x3a,
	0x8e, 0xee, 0xa5, 0x78, 0xc0, 0x23, 0x5c, 0x6f, 0x54, 0xae, 0x88, 0x5b, 0x27, 0x95, 0x90, 0x77,
	0xda, 0x5f, 0xb3, 0xe6, 0x32, 0xcb, 0xab, 0xb3, 0xaa, 0xf2, 0x5e, 0x2c, 0x95, 0x5a, 0xa6, 0x22,
	0xc2, 0x28, 0xde, 0x7d, 0x8f, 0x78, 0xa6, 0xab, 0xa7, 0xe9, 0x6f, 0x1b, 0x26, 0xf3, 0x9d, 0x4c,
	0x93, 0x4b, 0x95, 0x08, 0xf2, 0x14, 0x6c, 0x99, 0x50, 0xcb, 0xb7, 0x02, 0x87, 0xd9, 0x32, 0x21,
	0x14, 0x0e, 0xe2, 0xf2, 0x71, 0x91, 0x50, 0x1b, 0xc1, 0x26, 0x24, 0xaf, 0x00, 0xe2, 0x8d, 0x4c,
	0x96, 0xe2, 0x92, 0xaf, 0x04, 0x75, 0x7c, 0x2b, 0x98, 0x30, 0x03, 0x21, 0xef, 0xc1, 0xad, 0xa2,
	0x1b, 0x9e, 0xee, 0x04, 0x1d, 0xf8, 0x56, 0xe0, 0xce, 0x9e, 0x87, 0x55, 0x23, 0x61, 0xd3, 0x48,
	0x78, 0x91, 0x69, 0x66, 0x26, 0x92, 0x73, 0x18, 0xdd, 0x97, 0x97, 0x2d, 0x1d, 0xfa, 0x4e, 0xe0,
	0xce, 0xa6, 0xa1, 0x31, 0x71, 0xd8, 0x76, 0x1a, 0x62, 0xf6, 0xf6, 0x63, 0x96, 0x6f, 0x34, 0xab,
	0x2b, 0x88, 0x07, 0xe3, 0xdb, 0x3b, 0x99, 0x26, 0x1b, 0x91, 0xd1, 0x91, 0xef, 0x04, 0x0e, 0x6b,
	0x63, 0xef, 0x0b, 0xb8, 0x46, 0x09, 0x39, 0x02, 0xe7, 0x87, 0xd0, 0x38, 0xe9, 0x84, 0x95, 0x57,
	0xf2, 0x16, 0x86, 0x48, 0x83, 0x83, 0xfe, 0xaf, 0xd5, 0x2a, 0xe5, 0xdc, 0xfe, 0x60, 0x4d, 0xff,
	0x5a, 0x70, 0xf8, 0x89, 0x6b, 0xb5, 0xcb, 0xaf, 0x4a, 0xa5, 0x7b, 0xe5, 0xf3, 0x60, 0x9c, 0x62,
	0x4a, 0xab, 0x5f, 0x1b, 0x97, 0xd2, 0xa2, 0x45, 0x8b, 0x04, 0xd5, 0x73, 0x58, 0x13, 0x12, 0x02,
	0x83, 0x95, 0xcc, 0x0a, 0xd4, 0xcc, 0x62, 0x78, 0xaf, 0x31, 0x4d, 0x87, 0x2d, 0xa6, 0x11, 0xe3,
	0x45, 0x41, 0x47, 0x35, 0xc6, 0x8b, 0xa2, 0xc6, 0x34, 0x3d, 0x68, 0x31, 0x4d, 0x4e, 0x60, 0xf4,
	0x73, 0x91, 0x25, 0xa2, 0xa0, 0x63, 0xfc, 0xa8, 0x8e, 0xc8, 0x19, 0x00, 0x7e, 0x79, 0x9d, 0xeb,
	0x54, 0xd0, 0x09, 0x8e, 0xfd, 0xac, 0x91, 0xbb, 0x5a, 0x1f, 0x7c, 0x62, 0x46, 0xda, 0xf4, 0x8f,
	0x0d, 0x03, 0xa6, 0x54, 0x4e, 0xae, 0xe1, 0x28, 0xed, 0x8e, 0xbf, 0xa5, 0x36, 0x5a, 0x76, 0xda,
	0xb1, 0xac, 0x4c, 0x0e, 0xf7, 0x84, 0xaa, 0x7d, 0x7b, 0x44, 0x40, 0x2e, 0x00, 0xe2, 0xc6, 0xe2,
	0x2d, 0x75, 0x90, 0xee, 0xf5, 0x63, 0xba, 0x76, 0x0d, 0x6a, 0x22, 0xa3, 0xc8, 0xe3, 0x70, 0xdc,
	0xfb, 0x9b, 0x69, 0xb9, 0x53, 0x59, 0x3e, 0xeb, 0x5a, 0xfe, 0xb2, 0xf3, 0xd1, 0x1e, 0x89, 0x61,
	0xbd, 0xf7, 0x15, 0x0e, 0xf7, 0x3a, 0xe8, 0x21, 0x7f, 0xd7, 0x25, 0x3f, 0xe9, 0xdf, 0x63, 0x83,
	0x76, 0x7e, 0xfc, 0x6d, 0x50, 0x3e, 0xfe, 0xb2, 0x9f, 0x7c, 0xc6, 0xd4, 0x1b, 0x29, 0x1e, 0xae,
	0xe6, 0xf1, 0x08, 0x37, 0xf0, 0xec, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xc7, 0xbb, 0xc2,
	0x22, 0x04, 0x00, 0x00,
}
