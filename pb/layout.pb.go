// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/overcyn/mochi/pb/layout.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Point struct {
	X float64 `protobuf:"fixed64,1,opt,name=x" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y" json:"y,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Point) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Rect struct {
	Min *Point `protobuf:"bytes,1,opt,name=min" json:"min,omitempty"`
	Max *Point `protobuf:"bytes,2,opt,name=max" json:"max,omitempty"`
}

func (m *Rect) Reset()                    { *m = Rect{} }
func (m *Rect) String() string            { return proto.CompactTextString(m) }
func (*Rect) ProtoMessage()               {}
func (*Rect) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Rect) GetMin() *Point {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *Rect) GetMax() *Point {
	if m != nil {
		return m.Max
	}
	return nil
}

type Insets struct {
	Top    float64 `protobuf:"fixed64,1,opt,name=top" json:"top,omitempty"`
	Left   float64 `protobuf:"fixed64,2,opt,name=left" json:"left,omitempty"`
	Bottom float64 `protobuf:"fixed64,3,opt,name=bottom" json:"bottom,omitempty"`
	Right  float64 `protobuf:"fixed64,4,opt,name=right" json:"right,omitempty"`
}

func (m *Insets) Reset()                    { *m = Insets{} }
func (m *Insets) String() string            { return proto.CompactTextString(m) }
func (*Insets) ProtoMessage()               {}
func (*Insets) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Insets) GetTop() float64 {
	if m != nil {
		return m.Top
	}
	return 0
}

func (m *Insets) GetLeft() float64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *Insets) GetBottom() float64 {
	if m != nil {
		return m.Bottom
	}
	return 0
}

func (m *Insets) GetRight() float64 {
	if m != nil {
		return m.Right
	}
	return 0
}

type Guide struct {
	Frame  *Rect   `protobuf:"bytes,1,opt,name=frame" json:"frame,omitempty"`
	Insets *Insets `protobuf:"bytes,2,opt,name=insets" json:"insets,omitempty"`
	ZIndex int64   `protobuf:"varint,3,opt,name=zIndex" json:"zIndex,omitempty"`
}

func (m *Guide) Reset()                    { *m = Guide{} }
func (m *Guide) String() string            { return proto.CompactTextString(m) }
func (*Guide) ProtoMessage()               {}
func (*Guide) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *Guide) GetFrame() *Rect {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *Guide) GetInsets() *Insets {
	if m != nil {
		return m.Insets
	}
	return nil
}

func (m *Guide) GetZIndex() int64 {
	if m != nil {
		return m.ZIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*Point)(nil), "layout.Point")
	proto.RegisterType((*Rect)(nil), "layout.Rect")
	proto.RegisterType((*Insets)(nil), "layout.Insets")
	proto.RegisterType((*Guide)(nil), "layout.Guide")
}

func init() { proto.RegisterFile("github.com/overcyn/mochi/pb/layout.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0xc9, 0x5f, 0x61, 0xac, 0x45, 0x06, 0x91, 0xdc, 0x94, 0x08, 0xd2, 0x53, 0x02, 0xfa,
	0x06, 0xbd, 0x68, 0x0f, 0x42, 0xd9, 0xa3, 0x78, 0x49, 0xd2, 0x6d, 0xb3, 0xd8, 0x64, 0x42, 0x3a,
	0x91, 0xc4, 0xc7, 0xf1, 0x49, 0x65, 0x27, 0xdb, 0x5b, 0x6f, 0xf3, 0xcd, 0xf7, 0xcd, 0xce, 0x6f,
	0x07, 0x56, 0x07, 0xc3, 0xf5, 0x50, 0x66, 0x15, 0x35, 0x39, 0xfd, 0xe8, 0xbe, 0x9a, 0xda, 0xbc,
	0xa1, 0xaa, 0x36, 0x79, 0x57, 0xe6, 0xc7, 0x62, 0xa2, 0x81, 0xb3, 0xae, 0x27, 0x26, 0x8c, 0x67,
	0x95, 0x3e, 0x41, 0xb4, 0x25, 0xd3, 0x32, 0x2e, 0xc0, 0x1b, 0x13, 0xef, 0xd1, 0x5b, 0x79, 0xca,
	0x1b, 0xad, 0x9a, 0x12, 0x7f, 0x56, 0x53, 0xfa, 0x0e, 0xa1, 0xd2, 0x15, 0xe3, 0x03, 0x04, 0x8d,
	0x69, 0x25, 0x75, 0xfd, 0x72, 0x93, 0xb9, 0x07, 0x65, 0x5e, 0x59, 0x47, 0x02, 0xc5, 0x28, 0x83,
	0x17, 0x02, 0xc5, 0x98, 0x7e, 0x41, 0xbc, 0x69, 0x4f, 0x9a, 0x4f, 0x78, 0x0b, 0x01, 0x53, 0xe7,
	0x36, 0xda, 0x12, 0x11, 0xc2, 0xa3, 0xde, 0xb3, 0x5b, 0x2b, 0x35, 0xde, 0x43, 0x5c, 0x12, 0x33,
	0x35, 0x49, 0x20, 0x5d, 0xa7, 0xf0, 0x0e, 0xa2, 0xde, 0x1c, 0x6a, 0x4e, 0x42, 0x69, 0xcf, 0x22,
	0xfd, 0x86, 0xe8, 0x6d, 0x30, 0x3b, 0x8d, 0x29, 0x44, 0xfb, 0xbe, 0x68, 0xb4, 0x43, 0x5d, 0x9c,
	0x49, 0xec, 0x2f, 0xd4, 0x6c, 0xe1, 0x33, 0xc4, 0x46, 0x50, 0x1c, 0xee, 0xf2, 0x1c, 0x9a, 0x01,
	0x95, 0x73, 0x2d, 0xc2, 0xef, 0xa6, 0xdd, 0xe9, 0x51, 0x10, 0x02, 0xe5, 0xd4, 0x7a, 0xf9, 0xe9,
	0x77, 0xe5, 0x9f, 0x7f, 0xf5, 0x61, 0xef, 0xbb, 0x5d, 0x97, 0xb1, 0x1c, 0xf6, 0xf5, 0x3f, 0x00,
	0x00, 0xff, 0xff, 0xfc, 0xfb, 0x8b, 0xad, 0x84, 0x01, 0x00, 0x00,
}
