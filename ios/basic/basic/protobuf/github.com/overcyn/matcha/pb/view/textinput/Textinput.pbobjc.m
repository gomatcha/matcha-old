// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/overcyn/matcha/pb/view/textinput/textinput.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "github.com/overcyn/matcha/pb/view/textinput/Textinput.pbobjc.h"
 #import "github.com/overcyn/matcha/pb/text/Text.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MatchaTextInputPBTextinputRoot

@implementation MatchaTextInputPBTextinputRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MatchaTextInputPBTextinputRoot_FileDescriptor

static GPBFileDescriptor *MatchaTextInputPBTextinputRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"matcha.view.textinput"
                                                 objcPrefix:@"MatchaTextInputPB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MatchaTextInputPBView

@implementation MatchaTextInputPBView

@dynamic hasStyledText, styledText;
@dynamic focused;
@dynamic onUpdate;
@dynamic onFocus;

typedef struct MatchaTextInputPBView__storage_ {
  uint32_t _has_storage_[1];
  MatchaPBStyledText *styledText;
  int64_t onUpdate;
  int64_t onFocus;
} MatchaTextInputPBView__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "styledText",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaPBStyledText),
        .number = MatchaTextInputPBView_FieldNumber_StyledText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaTextInputPBView__storage_, styledText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "onUpdate",
        .dataTypeSpecific.className = NULL,
        .number = MatchaTextInputPBView_FieldNumber_OnUpdate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MatchaTextInputPBView__storage_, onUpdate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "onFocus",
        .dataTypeSpecific.className = NULL,
        .number = MatchaTextInputPBView_FieldNumber_OnFocus,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MatchaTextInputPBView__storage_, onFocus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "focused",
        .dataTypeSpecific.className = NULL,
        .number = MatchaTextInputPBView_FieldNumber_Focused,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaTextInputPBView class]
                                     rootClass:[MatchaTextInputPBTextinputRoot class]
                                          file:MatchaTextInputPBTextinputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaTextInputPBView__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\n\000\002\010\000\003\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaTextInputPBEvent

@implementation MatchaTextInputPBEvent

@dynamic hasStyledText, styledText;

typedef struct MatchaTextInputPBEvent__storage_ {
  uint32_t _has_storage_[1];
  MatchaPBStyledText *styledText;
} MatchaTextInputPBEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "styledText",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaPBStyledText),
        .number = MatchaTextInputPBEvent_FieldNumber_StyledText,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaTextInputPBEvent__storage_, styledText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaTextInputPBEvent class]
                                     rootClass:[MatchaTextInputPBTextinputRoot class]
                                          file:MatchaTextInputPBTextinputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaTextInputPBEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaTextInputPBFocusEvent

@implementation MatchaTextInputPBFocusEvent

@dynamic focused;

typedef struct MatchaTextInputPBFocusEvent__storage_ {
  uint32_t _has_storage_[1];
} MatchaTextInputPBFocusEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "focused",
        .dataTypeSpecific.className = NULL,
        .number = MatchaTextInputPBFocusEvent_FieldNumber_Focused,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaTextInputPBFocusEvent class]
                                     rootClass:[MatchaTextInputPBTextinputRoot class]
                                          file:MatchaTextInputPBTextinputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaTextInputPBFocusEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
