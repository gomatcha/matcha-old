// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/overcyn/mochi/pb/touch/touch2.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Timestamp.pbobjc.h>
#else
 #import "google/protobuf/Timestamp.pbobjc.h"
#endif

 #import "github.com/overcyn/mochi/pb/touch/Touch2.pbobjc.h"
 #import "github.com/overcyn/mochi/pb/Layout.pbobjc.h"
 #import "github.com/overcyn/mochi/pb/Touch.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MochiPBTouchTouch2Root

@implementation MochiPBTouchTouch2Root

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MochiPBTouchTouch2Root_FileDescriptor

static GPBFileDescriptor *MochiPBTouchTouch2Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"touch"
                                                 objcPrefix:@"MochiPBTouch"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MochiPBTouchButtonRecognizer

@implementation MochiPBTouchButtonRecognizer

@dynamic onEvent;

typedef struct MochiPBTouchButtonRecognizer__storage_ {
  uint32_t _has_storage_[1];
  int64_t onEvent;
} MochiPBTouchButtonRecognizer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onEvent",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTouchButtonRecognizer_FieldNumber_OnEvent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBTouchButtonRecognizer__storage_, onEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBTouchButtonRecognizer class]
                                     rootClass:[MochiPBTouchTouch2Root class]
                                          file:MochiPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBTouchButtonRecognizer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBTouchButtonEvent

@implementation MochiPBTouchButtonEvent

@dynamic hasTimestamp, timestamp;
@dynamic hasPosition, position;
@dynamic inside;
@dynamic kind;

typedef struct MochiPBTouchButtonEvent__storage_ {
  uint32_t _has_storage_[1];
  MochiPBEventKind kind;
  GPBTimestamp *timestamp;
  MochiPBPoint *position;
} MochiPBTouchButtonEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = MochiPBTouchButtonEvent_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBTouchButtonEvent__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBPoint),
        .number = MochiPBTouchButtonEvent_FieldNumber_Position,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBTouchButtonEvent__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inside",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTouchButtonEvent_FieldNumber_Inside,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = MochiPBEventKind_EnumDescriptor,
        .number = MochiPBTouchButtonEvent_FieldNumber_Kind,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MochiPBTouchButtonEvent__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBTouchButtonEvent class]
                                     rootClass:[MochiPBTouchTouch2Root class]
                                          file:MochiPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBTouchButtonEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MochiPBTouchButtonEvent_Kind_RawValue(MochiPBTouchButtonEvent *message) {
  GPBDescriptor *descriptor = [MochiPBTouchButtonEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MochiPBTouchButtonEvent_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetMochiPBTouchButtonEvent_Kind_RawValue(MochiPBTouchButtonEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [MochiPBTouchButtonEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MochiPBTouchButtonEvent_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
