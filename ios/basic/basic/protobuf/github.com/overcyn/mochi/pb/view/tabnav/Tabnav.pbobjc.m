// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/overcyn/mochi/pb/view/tabnav/tabnav.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "github.com/overcyn/mochi/pb/view/tabnav/Tabnav.pbobjc.h"
 #import "github.com/overcyn/mochi/pb/Imageview.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MochiPBTabNavTabnavRoot

@implementation MochiPBTabNavTabnavRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MochiPBTabNavTabnavRoot_FileDescriptor

static GPBFileDescriptor *MochiPBTabNavTabnavRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tabnav"
                                                 objcPrefix:@"MochiPBTabNav"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MochiPBTabNavScreen

@implementation MochiPBTabNavScreen

@dynamic id_p;
@dynamic title;
@dynamic hasIcon, icon;
@dynamic hasSelectedIcon, selectedIcon;
@dynamic badge;

typedef struct MochiPBTabNavScreen__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  MochiPBImage *icon;
  MochiPBImage *selectedIcon;
  NSString *badge;
  int64_t id_p;
} MochiPBTabNavScreen__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavScreen_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBTabNavScreen__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavScreen_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBTabNavScreen__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBImage),
        .number = MochiPBTabNavScreen_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MochiPBTabNavScreen__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selectedIcon",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBImage),
        .number = MochiPBTabNavScreen_FieldNumber_SelectedIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MochiPBTabNavScreen__storage_, selectedIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "badge",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavScreen_FieldNumber_Badge,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MochiPBTabNavScreen__storage_, badge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBTabNavScreen class]
                                     rootClass:[MochiPBTabNavTabnavRoot class]
                                          file:MochiPBTabNavTabnavRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBTabNavScreen__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBTabNavTabNav

@implementation MochiPBTabNavTabNav

@dynamic screensArray, screensArray_Count;
@dynamic selectedIndex;
@dynamic eventFunc;

typedef struct MochiPBTabNavTabNav__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *screensArray;
  int64_t selectedIndex;
  int64_t eventFunc;
} MochiPBTabNavTabNav__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "screensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBTabNavScreen),
        .number = MochiPBTabNavTabNav_FieldNumber_ScreensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MochiPBTabNavTabNav__storage_, screensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selectedIndex",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavTabNav_FieldNumber_SelectedIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBTabNavTabNav__storage_, selectedIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "eventFunc",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavTabNav_FieldNumber_EventFunc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBTabNavTabNav__storage_, eventFunc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBTabNavTabNav class]
                                     rootClass:[MochiPBTabNavTabnavRoot class]
                                          file:MochiPBTabNavTabnavRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBTabNavTabNav__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\002\r\000\003\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBTabNavEvent

@implementation MochiPBTabNavEvent

@dynamic selectedIndex;

typedef struct MochiPBTabNavEvent__storage_ {
  uint32_t _has_storage_[1];
  int64_t selectedIndex;
} MochiPBTabNavEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "selectedIndex",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavEvent_FieldNumber_SelectedIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBTabNavEvent__storage_, selectedIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBTabNavEvent class]
                                     rootClass:[MochiPBTabNavTabnavRoot class]
                                          file:MochiPBTabNavTabnavRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBTabNavEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
