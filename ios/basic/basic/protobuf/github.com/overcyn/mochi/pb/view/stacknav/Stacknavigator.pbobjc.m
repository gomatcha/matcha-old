// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/overcyn/mochi/pb/view/stacknav/stacknavigator.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "github.com/overcyn/mochi/pb/view/stacknav/Stacknavigator.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MochiPBStackNavStacknavigatorRoot

@implementation MochiPBStackNavStacknavigatorRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MochiPBStackNavStacknavigatorRoot_FileDescriptor

static GPBFileDescriptor *MochiPBStackNavStacknavigatorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"stacknav"
                                                 objcPrefix:@"MochiPBStackNav"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MochiPBStackNavScreen

@implementation MochiPBStackNavScreen

@dynamic id_p;
@dynamic title;
@dynamic customBackButtonTitle;
@dynamic backButtonTitle;
@dynamic backButtonHidden;
@dynamic titleViewId;
@dynamic rightViewIdsArray, rightViewIdsArray_Count;
@dynamic leftViewIdsArray, leftViewIdsArray_Count;

typedef struct MochiPBStackNavScreen__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  NSString *backButtonTitle;
  GPBInt64Array *rightViewIdsArray;
  GPBInt64Array *leftViewIdsArray;
  int64_t id_p;
  int64_t titleViewId;
} MochiPBStackNavScreen__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBStackNavScreen__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBStackNavScreen__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backButtonTitle",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_BackButtonTitle,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MochiPBStackNavScreen__storage_, backButtonTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backButtonHidden",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_BackButtonHidden,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "titleViewId",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_TitleViewId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MochiPBStackNavScreen__storage_, titleViewId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "rightViewIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_RightViewIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MochiPBStackNavScreen__storage_, rightViewIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "leftViewIdsArray",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_LeftViewIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MochiPBStackNavScreen__storage_, leftViewIdsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "customBackButtonTitle",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavScreen_FieldNumber_CustomBackButtonTitle,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBStackNavScreen class]
                                     rootClass:[MochiPBStackNavStacknavigatorRoot class]
                                          file:MochiPBStackNavStacknavigatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBStackNavScreen__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\003\017\000\004\020\000\005\013\000\006\000rightViewIds\000\007\000leftViewIds\000\010"
        "\025\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBStackNavStackNav

@implementation MochiPBStackNavStackNav

@dynamic screensArray, screensArray_Count;
@dynamic eventFunc;

typedef struct MochiPBStackNavStackNav__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *screensArray;
  int64_t eventFunc;
} MochiPBStackNavStackNav__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "screensArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBStackNavScreen),
        .number = MochiPBStackNavStackNav_FieldNumber_ScreensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MochiPBStackNavStackNav__storage_, screensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "eventFunc",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavStackNav_FieldNumber_EventFunc,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBStackNavStackNav__storage_, eventFunc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBStackNavStackNav class]
                                     rootClass:[MochiPBStackNavStacknavigatorRoot class]
                                          file:MochiPBStackNavStacknavigatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBStackNavStackNav__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\t\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBStackNavStackEvent

@implementation MochiPBStackNavStackEvent

@dynamic idArray, idArray_Count;

typedef struct MochiPBStackNavStackEvent__storage_ {
  uint32_t _has_storage_[1];
  GPBInt64Array *idArray;
} MochiPBStackNavStackEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idArray",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBStackNavStackEvent_FieldNumber_IdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MochiPBStackNavStackEvent__storage_, idArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBStackNavStackEvent class]
                                     rootClass:[MochiPBStackNavStacknavigatorRoot class]
                                          file:MochiPBStackNavStacknavigatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBStackNavStackEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
