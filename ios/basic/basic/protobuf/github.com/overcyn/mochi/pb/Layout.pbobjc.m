// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/overcyn/mochi/pb/layout.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "github.com/overcyn/mochi/pb/Layout.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MochiPBLayoutRoot

@implementation MochiPBLayoutRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - MochiPBLayoutRoot_FileDescriptor

static GPBFileDescriptor *MochiPBLayoutRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"layout"
                                                 objcPrefix:@"MochiPB"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MochiPBPoint

@implementation MochiPBPoint

@dynamic x;
@dynamic y;

typedef struct MochiPBPoint__storage_ {
  uint32_t _has_storage_[1];
  double x;
  double y;
} MochiPBPoint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "x",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBPoint_FieldNumber_X,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBPoint__storage_, x),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "y",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBPoint_FieldNumber_Y,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBPoint__storage_, y),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBPoint class]
                                     rootClass:[MochiPBLayoutRoot class]
                                          file:MochiPBLayoutRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBPoint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBRect

@implementation MochiPBRect

@dynamic hasMin, min;
@dynamic hasMax, max;

typedef struct MochiPBRect__storage_ {
  uint32_t _has_storage_[1];
  MochiPBPoint *min;
  MochiPBPoint *max;
} MochiPBRect__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "min",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBPoint),
        .number = MochiPBRect_FieldNumber_Min,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBRect__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBPoint),
        .number = MochiPBRect_FieldNumber_Max,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBRect__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBRect class]
                                     rootClass:[MochiPBLayoutRoot class]
                                          file:MochiPBLayoutRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBRect__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBInsets

@implementation MochiPBInsets

@dynamic top;
@dynamic left;
@dynamic bottom;
@dynamic right;

typedef struct MochiPBInsets__storage_ {
  uint32_t _has_storage_[1];
  double top;
  double left;
  double bottom;
  double right;
} MochiPBInsets__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "top",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBInsets_FieldNumber_Top,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBInsets__storage_, top),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "left",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBInsets_FieldNumber_Left,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBInsets__storage_, left),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bottom",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBInsets_FieldNumber_Bottom,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MochiPBInsets__storage_, bottom),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "right",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBInsets_FieldNumber_Right,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MochiPBInsets__storage_, right),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBInsets class]
                                     rootClass:[MochiPBLayoutRoot class]
                                          file:MochiPBLayoutRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBInsets__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBGuide

@implementation MochiPBGuide

@dynamic hasFrame, frame;
@dynamic hasInsets, insets;
@dynamic zIndex;

typedef struct MochiPBGuide__storage_ {
  uint32_t _has_storage_[1];
  MochiPBRect *frame;
  MochiPBInsets *insets;
  int64_t zIndex;
} MochiPBGuide__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "frame",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBRect),
        .number = MochiPBGuide_FieldNumber_Frame,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBGuide__storage_, frame),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "insets",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBInsets),
        .number = MochiPBGuide_FieldNumber_Insets,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBGuide__storage_, insets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "zIndex",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBGuide_FieldNumber_ZIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MochiPBGuide__storage_, zIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBGuide class]
                                     rootClass:[MochiPBLayoutRoot class]
                                          file:MochiPBLayoutRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBGuide__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
