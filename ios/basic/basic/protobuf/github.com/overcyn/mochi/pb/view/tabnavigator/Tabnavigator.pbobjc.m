// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/overcyn/mochi/pb/view/tabnavigator/tabnavigator.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "github.com/overcyn/mochi/pb/view/tabnavigator/Tabnavigator.pbobjc.h"
 #import "github.com/overcyn/mochi/pb/Imageview.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MochiPBTabNavigatorTabnavigatorRoot

@implementation MochiPBTabNavigatorTabnavigatorRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MochiPBTabNavigatorTabnavigatorRoot_FileDescriptor

static GPBFileDescriptor *MochiPBTabNavigatorTabnavigatorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tabnavigator"
                                                 objcPrefix:@"MochiPBTabNavigator"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MochiPBTabNavigatorTab

@implementation MochiPBTabNavigatorTab

@dynamic id_p;
@dynamic title;
@dynamic hasIcon, icon;
@dynamic hasSelectedIcon, selectedIcon;
@dynamic badge;

typedef struct MochiPBTabNavigatorTab__storage_ {
  uint32_t _has_storage_[1];
  NSString *title;
  MochiPBImage *icon;
  MochiPBImage *selectedIcon;
  NSString *badge;
  int64_t id_p;
} MochiPBTabNavigatorTab__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavigatorTab_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MochiPBTabNavigatorTab__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "title",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavigatorTab_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MochiPBTabNavigatorTab__storage_, title),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "icon",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBImage),
        .number = MochiPBTabNavigatorTab_FieldNumber_Icon,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MochiPBTabNavigatorTab__storage_, icon),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selectedIcon",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBImage),
        .number = MochiPBTabNavigatorTab_FieldNumber_SelectedIcon,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MochiPBTabNavigatorTab__storage_, selectedIcon),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "badge",
        .dataTypeSpecific.className = NULL,
        .number = MochiPBTabNavigatorTab_FieldNumber_Badge,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MochiPBTabNavigatorTab__storage_, badge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBTabNavigatorTab class]
                                     rootClass:[MochiPBTabNavigatorTabnavigatorRoot class]
                                          file:MochiPBTabNavigatorTabnavigatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBTabNavigatorTab__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\004\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MochiPBTabNavigatorTabNavigator

@implementation MochiPBTabNavigatorTabNavigator

@dynamic tabsArray, tabsArray_Count;

typedef struct MochiPBTabNavigatorTabNavigator__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tabsArray;
} MochiPBTabNavigatorTabNavigator__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tabsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MochiPBTabNavigatorTab),
        .number = MochiPBTabNavigatorTabNavigator_FieldNumber_TabsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MochiPBTabNavigatorTabNavigator__storage_, tabsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MochiPBTabNavigatorTabNavigator class]
                                     rootClass:[MochiPBTabNavigatorTabnavigatorRoot class]
                                          file:MochiPBTabNavigatorTabnavigatorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MochiPBTabNavigatorTabNavigator__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
