// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gomatcha.io/matcha/pb/touch/touch2.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Any.pbobjc.h>
 #import <Protobuf/Duration.pbobjc.h>
 #import <Protobuf/Timestamp.pbobjc.h>
#else
 #import "google/protobuf/Any.pbobjc.h"
 #import "google/protobuf/Duration.pbobjc.h"
 #import "google/protobuf/Timestamp.pbobjc.h"
#endif

 #import "gomatcha.io/matcha/pb/touch/Touch2.pbobjc.h"
 #import "gomatcha.io/matcha/pb/layout/Layout.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - MatchaPBTouchTouch2Root

@implementation MatchaPBTouchTouch2Root

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MatchaPBTouchTouch2Root_FileDescriptor

static GPBFileDescriptor *MatchaPBTouchTouch2Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"matcha.touch"
                                                 objcPrefix:@"MatchaPBTouch"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MatchaPBTouchEventKind

GPBEnumDescriptor *MatchaPBTouchEventKind_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "EventKindPossible\000EventKindChanged\000Event"
        "KindFailed\000EventKindRecognized\000";
    static const int32_t values[] = {
        MatchaPBTouchEventKind_EventKindPossible,
        MatchaPBTouchEventKind_EventKindChanged,
        MatchaPBTouchEventKind_EventKindFailed,
        MatchaPBTouchEventKind_EventKindRecognized,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MatchaPBTouchEventKind)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MatchaPBTouchEventKind_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MatchaPBTouchEventKind_IsValidValue(int32_t value__) {
  switch (value__) {
    case MatchaPBTouchEventKind_EventKindPossible:
    case MatchaPBTouchEventKind_EventKindChanged:
    case MatchaPBTouchEventKind_EventKindFailed:
    case MatchaPBTouchEventKind_EventKindRecognized:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - MatchaPBTouchRecognizer

@implementation MatchaPBTouchRecognizer

@dynamic id_p;
@dynamic hasRecognizer, recognizer;

typedef struct MatchaPBTouchRecognizer__storage_ {
  uint32_t _has_storage_[1];
  GPBAny *recognizer;
  int64_t id_p;
} MatchaPBTouchRecognizer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPBTouchRecognizer_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPBTouchRecognizer__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "recognizer",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = MatchaPBTouchRecognizer_FieldNumber_Recognizer,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MatchaPBTouchRecognizer__storage_, recognizer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchRecognizer class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchRecognizer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaPBTouchRecognizerList

@implementation MatchaPBTouchRecognizerList

@dynamic recognizersArray, recognizersArray_Count;

typedef struct MatchaPBTouchRecognizerList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *recognizersArray;
} MatchaPBTouchRecognizerList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "recognizersArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaPBTouchRecognizer),
        .number = MatchaPBTouchRecognizerList_FieldNumber_RecognizersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MatchaPBTouchRecognizerList__storage_, recognizersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchRecognizerList class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchRecognizerList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaPBTouchButtonRecognizer

@implementation MatchaPBTouchButtonRecognizer

@dynamic onEvent;
@dynamic ignoresScroll;

typedef struct MatchaPBTouchButtonRecognizer__storage_ {
  uint32_t _has_storage_[1];
  int64_t onEvent;
} MatchaPBTouchButtonRecognizer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "onEvent",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPBTouchButtonRecognizer_FieldNumber_OnEvent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPBTouchButtonRecognizer__storage_, onEvent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ignoresScroll",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPBTouchButtonRecognizer_FieldNumber_IgnoresScroll,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchButtonRecognizer class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchButtonRecognizer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\002\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaPBTouchButtonEvent

@implementation MatchaPBTouchButtonEvent

@dynamic hasTimestamp, timestamp;
@dynamic inside;
@dynamic kind;

typedef struct MatchaPBTouchButtonEvent__storage_ {
  uint32_t _has_storage_[1];
  MatchaPBTouchEventKind kind;
  GPBTimestamp *timestamp;
} MatchaPBTouchButtonEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = MatchaPBTouchButtonEvent_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPBTouchButtonEvent__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inside",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPBTouchButtonEvent_FieldNumber_Inside,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = MatchaPBTouchEventKind_EnumDescriptor,
        .number = MatchaPBTouchButtonEvent_FieldNumber_Kind,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MatchaPBTouchButtonEvent__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchButtonEvent class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchButtonEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MatchaPBTouchButtonEvent_Kind_RawValue(MatchaPBTouchButtonEvent *message) {
  GPBDescriptor *descriptor = [MatchaPBTouchButtonEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaPBTouchButtonEvent_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetMatchaPBTouchButtonEvent_Kind_RawValue(MatchaPBTouchButtonEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [MatchaPBTouchButtonEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaPBTouchButtonEvent_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - MatchaPBTouchTapRecognizer

@implementation MatchaPBTouchTapRecognizer

@dynamic count;
@dynamic recognizedFunc;

typedef struct MatchaPBTouchTapRecognizer__storage_ {
  uint32_t _has_storage_[1];
  int64_t count;
  int64_t recognizedFunc;
} MatchaPBTouchTapRecognizer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPBTouchTapRecognizer_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPBTouchTapRecognizer__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "recognizedFunc",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPBTouchTapRecognizer_FieldNumber_RecognizedFunc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MatchaPBTouchTapRecognizer__storage_, recognizedFunc),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchTapRecognizer class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchTapRecognizer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaPBTouchTapEvent

@implementation MatchaPBTouchTapEvent

@dynamic hasTimestamp, timestamp;
@dynamic hasPosition, position;
@dynamic kind;

typedef struct MatchaPBTouchTapEvent__storage_ {
  uint32_t _has_storage_[1];
  MatchaPBTouchEventKind kind;
  GPBTimestamp *timestamp;
  MatchaLayoutPBPoint *position;
} MatchaPBTouchTapEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = MatchaPBTouchTapEvent_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPBTouchTapEvent__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaLayoutPBPoint),
        .number = MatchaPBTouchTapEvent_FieldNumber_Position,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MatchaPBTouchTapEvent__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = MatchaPBTouchEventKind_EnumDescriptor,
        .number = MatchaPBTouchTapEvent_FieldNumber_Kind,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MatchaPBTouchTapEvent__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchTapEvent class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchTapEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MatchaPBTouchTapEvent_Kind_RawValue(MatchaPBTouchTapEvent *message) {
  GPBDescriptor *descriptor = [MatchaPBTouchTapEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaPBTouchTapEvent_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetMatchaPBTouchTapEvent_Kind_RawValue(MatchaPBTouchTapEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [MatchaPBTouchTapEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaPBTouchTapEvent_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - MatchaPBTouchPressRecognizer

@implementation MatchaPBTouchPressRecognizer

@dynamic hasMinDuration, minDuration;
@dynamic funcId;

typedef struct MatchaPBTouchPressRecognizer__storage_ {
  uint32_t _has_storage_[1];
  GPBDuration *minDuration;
  int64_t funcId;
} MatchaPBTouchPressRecognizer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "minDuration",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = MatchaPBTouchPressRecognizer_FieldNumber_MinDuration,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPBTouchPressRecognizer__storage_, minDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "funcId",
        .dataTypeSpecific.className = NULL,
        .number = MatchaPBTouchPressRecognizer_FieldNumber_FuncId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MatchaPBTouchPressRecognizer__storage_, funcId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchPressRecognizer class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchPressRecognizer__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\006\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MatchaPBTouchPressEvent

@implementation MatchaPBTouchPressEvent

@dynamic hasTimestamp, timestamp;
@dynamic hasPosition, position;
@dynamic kind;
@dynamic hasDuration, duration;

typedef struct MatchaPBTouchPressEvent__storage_ {
  uint32_t _has_storage_[1];
  MatchaPBTouchEventKind kind;
  GPBTimestamp *timestamp;
  MatchaLayoutPBPoint *position;
  GPBDuration *duration;
} MatchaPBTouchPressEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBTimestamp),
        .number = MatchaPBTouchPressEvent_FieldNumber_Timestamp,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MatchaPBTouchPressEvent__storage_, timestamp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "position",
        .dataTypeSpecific.className = GPBStringifySymbol(MatchaLayoutPBPoint),
        .number = MatchaPBTouchPressEvent_FieldNumber_Position,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MatchaPBTouchPressEvent__storage_, position),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "kind",
        .dataTypeSpecific.enumDescFunc = MatchaPBTouchEventKind_EnumDescriptor,
        .number = MatchaPBTouchPressEvent_FieldNumber_Kind,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MatchaPBTouchPressEvent__storage_, kind),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "duration",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBDuration),
        .number = MatchaPBTouchPressEvent_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MatchaPBTouchPressEvent__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MatchaPBTouchPressEvent class]
                                     rootClass:[MatchaPBTouchTouch2Root class]
                                          file:MatchaPBTouchTouch2Root_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MatchaPBTouchPressEvent__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MatchaPBTouchPressEvent_Kind_RawValue(MatchaPBTouchPressEvent *message) {
  GPBDescriptor *descriptor = [MatchaPBTouchPressEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaPBTouchPressEvent_FieldNumber_Kind];
  return GPBGetMessageInt32Field(message, field);
}

void SetMatchaPBTouchPressEvent_Kind_RawValue(MatchaPBTouchPressEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [MatchaPBTouchPressEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MatchaPBTouchPressEvent_FieldNumber_Kind];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
